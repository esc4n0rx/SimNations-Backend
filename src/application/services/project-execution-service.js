const cron = require('node-cron');
const ProjectExecutionRepository = require('../../domain/repositories/project-execution-repository');
const GovernmentProjectRepository = require('../../domain/repositories/government-project-repository');
const StateRepository = require('../../domain/repositories/state-repository');

class ProjectExecutionService {
    constructor() {
        this.executionRepository = new ProjectExecutionRepository();
        this.projectRepository = new GovernmentProjectRepository();
        this.stateRepository = new StateRepository();
    }

    /**
     * Processar execu√ß√µes pendentes
     * @returns {Promise<Object>} - Resultado da execu√ß√£o
     */
    async processPendingExecutions() {
        try {
            console.log('üîÑ Iniciando processamento de execu√ß√µes pendentes...');

            const pendingExecutions = await this.getPendingExecutions();
            
            if (pendingExecutions.length === 0) {
                console.log('‚ÑπÔ∏è Nenhuma execu√ß√£o pendente encontrada');
                return { processed: 0, errors: 0 };
            }

            console.log(`üìã ${pendingExecutions.length} execu√ß√µes pendentes encontradas`);

            let processed = 0;
            let errors = 0;

            for (const execution of pendingExecutions) {
                try {
                    await this.processExecution(execution);
                    await this.markExecutionAsExecuted(execution.id);
                    processed++;
                } catch (error) {
                    console.error(`‚ùå Erro ao processar execu√ß√£o ${execution.id}:`, error);
                    await this.markExecutionAsFailed(execution.id, error.message);
                    errors++;
                }
            }

            console.log(`‚úÖ Processamento conclu√≠do: ${processed} sucessos, ${errors} erros`);

            return { processed, errors };

        } catch (error) {
            console.error('‚ùå Erro no processamento de execu√ß√µes:', error);
            throw error;
        }
    }

    /**
     * Marcar execu√ß√£o como executada
     * @param {number} executionId - ID da execu√ß√£o
     * @returns {Promise<void>}
     */
    async markExecutionAsExecuted(executionId) {
        try {
            const { error } = await this.executionRepository.supabase
                .from('project_executions')
                .update({
                    status: 'executed',
                    executed_at: new Date().toISOString()
                })
                .eq('id', executionId);

            if (error) {
                throw new Error(`Erro ao atualizar execu√ß√£o: ${error.message}`);
            }

        } catch (error) {
            console.error('‚ùå Erro ao marcar execu√ß√£o como executada:', error);
            throw error;
        }
    }

    /**
     * Marcar execu√ß√£o como falhada
     * @param {number} executionId - ID da execu√ß√£o
     * @param {string} errorMessage - Mensagem de erro
     * @returns {Promise<void>}
     */
    async markExecutionAsFailed(executionId, errorMessage) {
        try {
            const { error } = await this.executionRepository.supabase
                .from('project_executions')
                .update({
                    status: 'failed',
                    error_message: errorMessage,
                    executed_at: new Date().toISOString()
                })
                .eq('id', executionId);

            if (error) {
                throw new Error(`Erro ao atualizar execu√ß√£o: ${error.message}`);
            }

        } catch (error) {
            console.error('‚ùå Erro ao marcar execu√ß√£o como falhada:', error);
            throw error;
        }
    }

    /**
     * Agendar parcelas de pagamento
     * @param {string} projectId - ID do projeto
     * @param {Object} installmentsConfig - Configura√ß√£o das parcelas
     * @returns {Promise<void>}
     */
    async scheduleInstallments(projectId, installmentsConfig) {
        try {
            console.log(`üìÖ Agendando ${installmentsConfig.number_of_installments} parcelas para projeto ${projectId}...`);

            const executions = [];
            const currentDate = new Date();

            for (let i = 1; i <= installmentsConfig.number_of_installments; i++) {
                const scheduledDate = new Date(currentDate);
                scheduledDate.setMonth(scheduledDate.getMonth() + i);

                executions.push({
                    project_id: projectId,
                    execution_type: 'payment',
                    scheduled_for: scheduledDate.toISOString(),
                    payment_amount: installmentsConfig.installment_amount,
                    installment_number: i,
                    total_installments: installmentsConfig.number_of_installments,
                    status: 'pending'
                });
            }

            await this.executionRepository.bulkCreate(executions);
            console.log(`‚úÖ ${executions.length} parcelas agendadas`);

        } catch (error) {
            console.error('‚ùå Erro ao agendar parcelas:', error);
            throw error;
        }
    }

    /**
     * [CORRIGIDO] Validar e normalizar dura√ß√£o do projeto
     * @param {number|undefined} estimatedDurationMonths - Dura√ß√£o estimada em meses
     * @returns {number} - Dura√ß√£o validada em meses (m√°ximo 0.5 m√™s = 2 semanas)
     */
    validateProjectDuration(estimatedDurationMonths) {
        // Se n√£o h√° dura√ß√£o estimada, usar padr√£o de 2 semanas (0.5 m√™s)
        if (!estimatedDurationMonths || estimatedDurationMonths <= 0) {
            return 0.5;
        }

        // Limitar a dura√ß√£o m√°xima a 0.5 m√™s (2 semanas)
        const maxDurationMonths = 0.5;
        
        if (estimatedDurationMonths > maxDurationMonths) {
            console.log(`‚ö†Ô∏è Dura√ß√£o de ${estimatedDurationMonths} meses √© muito longa. Limitando a ${maxDurationMonths} m√™s (2 semanas)`);
            return maxDurationMonths;
        }

        return estimatedDurationMonths;
    }

    /**
     * [CORRIGIDO] Agendar efeitos do projeto
     * @param {string} projectId - ID do projeto  
     * @param {Object} projectData - Dados do projeto
     * @returns {Promise<void>}
     */
    async scheduleEffects(projectId, projectData) {
        try {
            console.log(`üéØ Agendando efeitos para projeto ${projectId}...`);

            // Validar e normalizar dura√ß√£o
            const validatedDuration = this.validateProjectDuration(
                projectData.analysis_data?.estimated_duration_months
            );

            const currentDate = new Date();
            const effectDate = new Date(currentDate);
            
            // Converter meses em dias (1 m√™s = 30 dias)
            const daysToAdd = Math.floor(validatedDuration * 30);
            effectDate.setDate(effectDate.getDate() + daysToAdd);

            const effectExecution = {
                project_id: projectId,
                execution_type: 'effect',
                scheduled_for: effectDate.toISOString(),
                status: 'pending'
            };

            await this.executionRepository.create(effectExecution);
            console.log(`‚úÖ Efeitos agendados para ${effectDate.toLocaleDateString()}`);

        } catch (error) {
            console.error('‚ùå Erro ao agendar efeitos:', error);
            throw error;
        }
    }

    /**
     * [CORRIGIDO] Agendar conclus√£o do projeto
     * @param {string} projectId - ID do projeto
     * @param {Object} projectData - Dados do projeto
     * @returns {Promise<void>}
     */
    async scheduleCompletion(projectId, projectData) {
        try {
            console.log(`üèÅ Agendando conclus√£o para projeto ${projectId}...`);

            // Validar e normalizar dura√ß√£o
            const validatedDuration = this.validateProjectDuration(
                projectData.analysis_data?.estimated_duration_months
            );

            const currentDate = new Date();
            const completionDate = new Date(currentDate);
            
            // Converter meses em dias e adicionar 1 semana extra para conclus√£o
            const daysToAdd = Math.floor(validatedDuration * 30) + 7; // +7 dias para finaliza√ß√£o
            completionDate.setDate(completionDate.getDate() + daysToAdd);

            const completionExecution = {
                project_id: projectId,
                execution_type: 'completion',
                scheduled_for: completionDate.toISOString(),
                status: 'pending'
            };

            await this.executionRepository.create(completionExecution);
            console.log(`‚úÖ Conclus√£o agendada para ${completionDate.toLocaleDateString()}`);

        } catch (error) {
            console.error('‚ùå Erro ao agendar conclus√£o:', error);
            throw error;
        }
    }

    /**
     * Processar execu√ß√£o individual
     * @param {Object} execution - Execu√ß√£o a ser processada
     * @returns {Promise<void>}
     */
    async processExecution(execution) {
        try {
            console.log(`‚öôÔ∏è Processando execu√ß√£o ${execution.id} - Tipo: ${execution.execution_type}`);

            switch (execution.execution_type) {
                case 'payment':
                    await this.processPayment(execution);
                    break;
                case 'effect':
                    await this.processEffect(execution);
                    break;
                case 'completion':
                    await this.processCompletion(execution);
                    break;
                default:
                    throw new Error(`Tipo de execu√ß√£o n√£o reconhecido: ${execution.execution_type}`);
            }

            console.log(`‚úÖ Execu√ß√£o ${execution.id} processada com sucesso`);

        } catch (error) {
            console.error(`‚ùå Erro ao processar execu√ß√£o ${execution.id}:`, error);
            throw error;
        }
    }

    /**
     * Processar pagamento/parcela
     * @param {Object} execution - Dados da execu√ß√£o
     * @returns {Promise<void>}
     */
    async processPayment(execution) {
        try {
            console.log(`üí∞ Processando pagamento de ${execution.payment_amount} para projeto ${execution.project_id}`);

            // Buscar estado do projeto
            const project = await this.projectRepository.findById(execution.project_id);
            if (!project) {
                throw new Error('Projeto n√£o encontrado');
            }

            // Debitar valor do or√ßamento do estado
            const state = await this.stateRepository.getStateById(project.state_id);
            if (!state) {
                throw new Error('Estado n√£o encontrado');
            }

            const newBudget = state.economy.budget - execution.payment_amount;
            
            if (newBudget < 0) {
                throw new Error(`Or√ßamento insuficiente. Dispon√≠vel: ${state.economy.budget}, Necess√°rio: ${execution.payment_amount}`);
            }

            await this.stateRepository.updateEconomicData(project.state_id, {
                budget: newBudget
            });

            console.log(`‚úÖ Pagamento processado: ${execution.payment_amount} debitado do or√ßamento`);

        } catch (error) {
            console.error('‚ùå Erro ao processar pagamento:', error);
            throw error;
        }
    }

    /**
     * Processar efeitos do projeto
     * @param {Object} execution - Dados da execu√ß√£o
     * @returns {Promise<void>}
     */
    async processEffect(execution) {
        try {
            console.log(`üéØ Aplicando efeitos para projeto ${execution.project_id}`);

            // Buscar projeto com dados completos
            const project = await this.projectRepository.findById(execution.project_id);
            if (!project) {
                throw new Error('Projeto n√£o encontrado');
            }

            // Aplicar efeitos econ√¥micos e pol√≠ticos baseados na an√°lise
            if (project.analysis_data?.economic_return_projection) {
                const economicImpacts = project.analysis_data.economic_return_projection;
                
                // Aplicar aumento de receita mensal
                if (economicImpacts.revenue_increase_monthly) {
                    await this.stateRepository.updateEconomicData(project.state_id, {
                        monthly_revenue: (await this.stateRepository.getStateById(project.state_id)).economy.monthly_revenue + economicImpacts.revenue_increase_monthly
                    });
                }
            }

            // Aplicar impactos sociais se houver
            if (project.analysis_data?.social_impact_projection?.quality_of_life_improvement) {
                const improvement = project.analysis_data.social_impact_projection.quality_of_life_improvement;
                
                let approvalIncrease = 0;
                switch (improvement) {
                    case 'high': approvalIncrease = 5; break;
                    case 'medium': approvalIncrease = 3; break;
                    case 'low': approvalIncrease = 1; break;
                }

                if (approvalIncrease > 0) {
                    const currentState = await this.stateRepository.getStateById(project.state_id);
                    const newApproval = Math.min(100, currentState.governance.approval_rating + approvalIncrease);
                    
                    await this.stateRepository.updateGovernanceData(project.state_id, {
                        approval_rating: newApproval
                    });
                }
            }

            console.log(`‚úÖ Efeitos aplicados para projeto ${execution.project_id}`);

        } catch (error) {
            console.error('‚ùå Erro ao aplicar efeitos:', error);
            throw error;
        }
    }

    /**
     * Processar conclus√£o do projeto
     * @param {Object} execution - Dados da execu√ß√£o
     * @returns {Promise<void>}
     */
    async processCompletion(execution) {
        try {
            console.log(`üèÅ Finalizando projeto ${execution.project_id}`);

            // Buscar e atualizar projeto
            const project = await this.projectRepository.findById(execution.project_id);
            if (!project) {
                throw new Error('Projeto n√£o encontrado');
            }

            // Marcar projeto como conclu√≠do
            project.complete();
            
            await this.projectRepository.update(execution.project_id, project);

            console.log(`‚úÖ Projeto ${execution.project_id} conclu√≠do`);

        } catch (error) {
            console.error('‚ùå Erro ao finalizar projeto:', error);
            throw error;
        }
    }

    /**
     * Obter execu√ß√µes pendentes
     * @param {number} limit - Limite de resultados
     * @returns {Promise<Array>}
     */
    async getPendingExecutions(limit = 50) {
        try {
            const { data: executions, error } = await this.executionRepository.supabase
                .from('project_executions')
                .select(`
                    *,
                    government_projects!inner(
                        id,
                        user_id,
                        state_id,
                        status
                    )
                `)
                .eq('status', 'pending')
                .lte('scheduled_for', new Date().toISOString()) // S√≥ execu√ß√µes que j√° deveriam ter acontecido
                .order('scheduled_for', { ascending: true })
                .limit(limit);

            if (error) {
                throw new Error(`Erro ao buscar execu√ß√µes pendentes: ${error.message}`);
            }

            return executions || [];
        } catch (error) {
            console.error('‚ùå Erro ao buscar execu√ß√µes pendentes:', error);
            throw error;
        }
    }

    /**
     * [CORRIGIDO] Iniciar job autom√°tica de execu√ß√£o
     * @returns {void}
     */
    startExecutionJob() {
        // Executar a cada hora
        cron.schedule('0 * * * *', async () => {
            try {
                console.log('‚è∞ Executando job de projetos...');
                await this.processPendingExecutions();
            } catch (error) {
                console.error('‚ùå Erro na job de execu√ß√£o:', error);
            }
        });

        console.log('‚úÖ Job de execu√ß√£o de projetos iniciada (execu√ß√£o a cada hora)');
    }

    /**
     * Executar job manualmente (para desenvolvimento)
     * @returns {Promise<Object>} - Resultado da execu√ß√£o
     */
    async executeJobManually() {
        try {
            console.log('üîß Executando job manualmente...');
            return await this.processPendingExecutions();
        } catch (error) {
            console.error('‚ùå Erro na execu√ß√£o manual da job:', error);
            throw error;
        }
    }
}

module.exports = ProjectExecutionService;